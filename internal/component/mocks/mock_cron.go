// Code generated by MockGen. DO NOT EDIT.
// Source: cron.go

// Package mock_component is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pushconfig "github.com/xuhaidong1/offlinepush/config/pushconfig"
	gomock "go.uber.org/mock/gomock"
)

// MockCroner is a mock of Croner interface.
type MockCroner struct {
	ctrl     *gomock.Controller
	recorder *MockCronerMockRecorder
}

// MockCronerMockRecorder is the mock recorder for MockCroner.
type MockCronerMockRecorder struct {
	mock *MockCroner
}

// NewMockCroner creates a new mock instance.
func NewMockCroner(ctrl *gomock.Controller) *MockCroner {
	mock := &MockCroner{ctrl: ctrl}
	mock.recorder = &MockCronerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCroner) EXPECT() *MockCronerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockCroner) Subscribe(ctx context.Context) <-chan pushconfig.PushConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx)
	ret0, _ := ret[0].(<-chan pushconfig.PushConfig)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCronerMockRecorder) Subscribe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCroner)(nil).Subscribe), ctx)
}
